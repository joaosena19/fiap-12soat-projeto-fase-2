apiVersion: apps/v1
kind: Deployment
metadata:
  name: postgres-deployment
spec:
  replicas: 1 # Para um banco de dados simples, SEMPRE use apenas 1 réplica.
  selector:
    matchLabels:
      app: postgres # Um seletor para encontrar os pods deste deployment
  template:
    metadata:
      labels:
        app: postgres # A label que o seletor acima e o Service usarão
    spec:
      containers:
      - name: postgres
        image: postgres:16-alpine # Usando a mesma imagem do seu docker-compose
        ports:
        - containerPort: 5432 # Porta padrão do PostgreSQL
        resources: # Para evitar competição de recursos do banco de dados com os Pods da API
          requests:
            cpu: "250m"
            memory: "512Mi"
          limits:
            cpu: "500m"
            memory: "1Gi"
        env:
          # AQUI A MÁGICA ACONTECE!
          # Reutilizamos as configurações do ConfigMap e Secret da nossa API
          # para garantir que as credenciais sejam sempre as mesmas.
          - name: POSTGRES_DB
            valueFrom:
              configMapKeyRef:
                name: oficina-mecanica-config # Nome do ConfigMap da API
                key: DatabaseConnection__DatabaseName
          - name: POSTGRES_USER
            valueFrom:
              configMapKeyRef:
                name: oficina-mecanica-config # Nome do ConfigMap da API
                key: DatabaseConnection__User
          - name: POSTGRES_PASSWORD
            valueFrom:
              secretKeyRef:
                name: oficina-mecanica-secret # Nome do Secret da API
                key: DatabaseConnection__Password
        volumeMounts:
          - name: postgres-storage # Nome do volume que definimos abaixo
            # O diretório DENTRO do contêiner onde o Postgres guarda os dados
            mountPath: /var/lib/postgresql/data
        # Health Probes para monitoramento da saúde do PostgreSQL
        # Todas as Probes usam o comando pg_isready, mas o tempos e failureThreshold variam, o que muda o uso de cada Probe.
        livenessProbe:
          exec:
            command:
            - /bin/sh
            - -c
            - pg_isready -U $POSTGRES_USER -d $POSTGRES_DB
          initialDelaySeconds: 30
          periodSeconds: 30
          timeoutSeconds: 5
          failureThreshold: 3
        readinessProbe:
          exec:
            command:
            - /bin/sh
            - -c
            - pg_isready -U $POSTGRES_USER -d $POSTGRES_DB
          initialDelaySeconds: 10
          periodSeconds: 5
          timeoutSeconds: 3
          failureThreshold: 3
        startupProbe:
          exec:
            command:
            - /bin/sh
            - -c
            - pg_isready -U $POSTGRES_USER -d $POSTGRES_DB
          initialDelaySeconds: 10
          periodSeconds: 10
          timeoutSeconds: 3
          failureThreshold: 12
      volumes:
        - name: postgres-storage # Define um volume para o Pod
          persistentVolumeClaim:
            # Conecta este volume ao PVC que criamos no primeiro arquivo
            claimName: postgres-pvc