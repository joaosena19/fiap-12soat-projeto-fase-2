name: Deploy Completo para Kubernetes (EKS)

# Trigger: acionado em todo push para a branch 'main'
on:
  push:
    branches: [ "main" ]

jobs:
  build-and-test:
    name: 1. Build e Teste
    runs-on: ubuntu-latest
    steps:
      - name: Checkout do código
        uses: actions/checkout@v4

      - name: Configurar .NET 9.0
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: '9.0.x'
          
      - name: Encontrar arquivo da Solution (.sln)
        id: find_sln
        run: echo "sln_path=$(find . -name '*.sln' -print -quit)" >> $GITHUB_OUTPUT
        
      - name: Restaurar dependências
        run: dotnet restore ${{ steps.find_sln.outputs.sln_path }}

      - name: Buildar a aplicação (Release)
        run: dotnet build ${{ steps.find_sln.outputs.sln_path }} --no-restore --configuration Release

      - name: Rodar testes unitários (Release)
        run: dotnet test ${{ steps.find_sln.outputs.sln_path }} --no-build --configuration Release --verbosity normal
        env:
          # Valores dummy para o appsettings necessários para os testes
          DatabaseConnection__Host: "localhost"
          DatabaseConnection__Port: "5432"
          DatabaseConnection__DatabaseName: "db_test"
          DatabaseConnection__User: "test_user"
          DatabaseConnection__Password: "test_password"
          Jwt__Key: "dummy-super-secret-key-for-testing-purposes-only"
          ApiCredentials__ClientId: "test-client"
          ApiCredentials__ClientSecret: "test-secret"

  publish-docker-image:
    name: 2. Publicar Imagem Docker
    runs-on: ubuntu-latest
    needs: build-and-test # Executa em paralelo com o Terraform pois só precisa do build-and-test
    outputs:
      version_tag: ${{ steps.version.outputs.VERSION }}
    steps:
      - name: Checkout do código
        uses: actions/checkout@v4

      - name: Gerar tag de versão
        id: version
        run: |
          echo "VERSION=v$(date +%Y%m%d-%H%M%S)-${GITHUB_SHA::8}" >> $GITHUB_OUTPUT

      - name: Login no Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Buildar e enviar imagem Docker
        uses: docker/build-push-action@v5
        with:
          context: ./src
          file: ./src/Dockerfile
          push: true
          tags: |
            joaodainese/fiap-12-soat-projeto-fase2:latest
            joaodainese/fiap-12-soat-projeto-fase2:${{ steps.version.outputs.VERSION }}
            
  apply-infrastructure:
    name: 3. Aplicar Infraestrutura (Terraform)
    runs-on: ubuntu-latest
    needs: build-and-test # Executa em paralelo com o Docker pois só precisa do build-and-test

    steps:
      - name: Checkout do código
        uses: actions/checkout@v4

      - name: Configurar credenciais da AWS
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}

      - name: Configurar Terraform
        uses: hashicorp/setup-terraform@v3

      - name: Inicializar Terraform
        run: terraform init
        working-directory: ./infra

      - name: Validar configuração do Terraform
        run: terraform validate
        working-directory: ./infra

      - name: Aplicar alterações do Terraform
        env:
          TF_VAR_bucket_name: ${{ secrets.TF_VAR_BUCKET_NAME }}
          TF_VAR_eks_iam_user_name: ${{ secrets.TF_VAR_EKS_IAM_USER_NAME }}
          TF_VAR_eks_node_scaling_desired_size: ${{ secrets.TF_VAR_EKS_NODE_SCALING_DESIRED_SIZE }}
          TF_VAR_eks_node_scaling_max_size: ${{ secrets.TF_VAR_EKS_NODE_SCALING_MAX_SIZE }}
          TF_VAR_eks_node_scaling_min_size: ${{ secrets.TF_VAR_EKS_NODE_SCALING_MIN_SIZE }}
          TF_VAR_eks_cluster_name: ${{ secrets.TF_VAR_EKS_CLUSTER_NAME }}
        run: terraform apply -auto-approve
        working-directory: ./infra

        
      - name: Resumo da infraestrutura
        run: echo "Infraestrutura aplicada com sucesso."

  deploy-to-kubernetes:
    name: 4. Deploy no Kubernetes (EKS)
    runs-on: ubuntu-latest
    needs: [publish-docker-image, apply-infrastructure] # Depende do Docker e do Terraform
    # Executa se ambos os jobs anteriores foram bem-sucedidos
    if: needs.publish-docker-image.result == 'success' && needs.apply-infrastructure.result == 'success'
    steps:
      - name: Checkout do código
        uses: actions/checkout@v4
        
      - name: Configurar credenciais da AWS
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}

      - name: Verificar conectividade com AWS
        run: |
          echo "Verificando identidade AWS..."
          aws sts get-caller-identity
          echo "Listando clusters EKS..."
          aws eks list-clusters --region ${{ secrets.AWS_REGION }}

      - name: Configurar acesso ao cluster EKS
        run: |
          echo "Configurando kubeconfig para o cluster: ${{ secrets.TF_VAR_EKS_CLUSTER_NAME }}"
          aws eks update-kubeconfig --region ${{ secrets.AWS_REGION }} --name ${{ secrets.TF_VAR_EKS_CLUSTER_NAME }}
          echo "Testando conectividade com o cluster..."
          kubectl cluster-info
          kubectl get nodes

      - name: Atualizar tag da imagem no manifesto k8s
        run: |
          # Usa o output do job 'publish-docker-image' para garantir consistência
          sed -i "s|image:.*|image: joaodainese/fiap-12-soat-projeto-fase2:${{ needs.publish-docker-image.outputs.version_tag }}|g" k8s/api/oficina-mecanica-deployment.yaml

      - name: Verificar manifesto antes de aplicar
        run: |
          echo "Validando manifestos k8s..."
          kubectl apply -f k8s/ --dry-run=client --validate=true || {
            echo "Erro na validação. Tentando aplicar com validação desabilitada..."
            kubectl apply -f k8s/ --validate=false
          }

      - name: Aplicar configurações gerais
        run: kubectl apply -f k8s/ --validate=false

      - name: Aplicar manifestos do banco de dados
        run: kubectl apply -f k8s/postgres/ --validate=false

      - name: Aplicar manifestos da API
        run: kubectl apply -f k8s/api/ --validate=false
        
      - name: Verificar o status do deploy
        run: kubectl rollout status deployment/oficina-mecanica-deployment --timeout=120s

