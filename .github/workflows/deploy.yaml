# =====================================================
# WORKFLOW DE CD - OFICINA MECÂNICA API
# =====================================================
# Este workflow automatiza o processo completo de deploy
# para a branch 'main'.
# 1. Valida a qualidade do código (build e testes)
# 2. Publica a imagem Docker (em paralelo com Terraform)
# 3. Aplica mudanças na infraestrutura (se houver)
# 4. Faz o deploy no cluster Kubernetes (EKS)
# =====================================================

name: Deploy Completo para Kubernetes (EKS)

# =====================================================
# TRIGGER
# =====================================================
on:
  push:
    branches: [ "main" ]

# =====================================================
# JOBS
# =====================================================
jobs:
  # ===================================================
  # JOB 1: BUILD E TESTES (VERIFICAÇÃO FINAL)
  # ===================================================
  build-and-test:
    name: 1. Build e Teste
    runs-on: ubuntu-latest
    steps:
      - name: Checkout do código
        uses: actions/checkout@v4

      - name: Configurar .NET 9.0
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: '9.0.x'
          
      - name: Encontrar arquivo da Solution (.sln)
        id: find_sln
        run: echo "sln_path=$(find . -name '*.sln' -print -quit)" >> $GITHUB_OUTPUT
        
      - name: Restaurar dependências
        run: dotnet restore ${{ steps.find_sln.outputs.sln_path }}

      - name: Buildar a aplicação (Release)
        run: dotnet build ${{ steps.find_sln.outputs.sln_path }} --no-restore --configuration Release

      - name: Rodar testes unitários (Release)
        run: dotnet test ${{ steps.find_sln.outputs.sln_path }} --no-build --configuration Release --verbosity normal

  # ===================================================
  # JOB 2: PUBLICAÇÃO DA IMAGEM DOCKER
  # ===================================================
  publish-docker-image:
    name: 2. Publicar Imagem Docker
    runs-on: ubuntu-latest
    needs: build-and-test
    outputs:
      version_tag: ${{ steps.version.outputs.VERSION }}
    steps:
      - name: Checkout do código
        uses: actions/checkout@v4

      - name: Gerar tag de versão
        id: version
        run: |
          echo "VERSION=v$(date +%Y%m%d-%H%M%S)-${GITHUB_SHA::8}" >> $GITHUB_OUTPUT

      - name: Login no Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Buildar e enviar imagem Docker
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./src/Dockerfile
          push: true
          tags: |
            joaodainese/fiap-12-soat-projeto-fase2:latest
            joaodainese/fiap-12-soat-projeto-fase2:${{ steps.version.outputs.VERSION }}
            
  # ===================================================
  # JOB 3: APLICAR INFRAESTRUTURA (TERRAFORM)
  # ===================================================
  apply-infrastructure:
    name: 3. Aplicar Infraestrutura (Terraform)
    runs-on: ubuntu-latest
    needs: build-and-test
    # Define um output para que outros jobs saibam se ele rodou
    outputs:
      infra_changed: ${{ steps.changes.outputs.infra_changed }}
    steps:
      - name: Checkout do código
        uses: actions/checkout@v4
        with:
          fetch-depth: 0 # Necessário para comparar com o commit anterior

      - name: Verificar mudanças na pasta infra
        id: changes
        run: |
          if git diff --name-only HEAD~1..HEAD | grep -q '^infra/'; then
            echo "infra_changed=true" >> $GITHUB_OUTPUT
          else
            echo "infra_changed=false" >> $GITHUB_OUTPUT
          fi

      - name: Configurar credenciais da AWS
        if: steps.changes.outputs.infra_changed == 'true'
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}

      - name: Configurar Terraform
        if: steps.changes.outputs.infra_changed == 'true'
        uses: hashicorp/setup-terraform@v3

      - name: Inicializar Terraform
        if: steps.changes.outputs.infra_changed == 'true'
        run: terraform init
        working-directory: ./infra

      - name: Validar configuração do Terraform
        if: steps.changes.outputs.infra_changed == 'true'
        run: terraform validate
        working-directory: ./infra

      - name: Aplicar alterações do Terraform
        if: steps.changes.outputs.infra_changed == 'true'
        env:
          TF_VAR_bucket_name: ${{ secrets.TF_VAR_BUCKET_NAME }}
          TF_VAR_eks_iam_user_name: ${{ secrets.TF_VAR_EKS_IAM_USER_NAME }}
          TF_VAR_eks_node_scaling_desired_size: ${{ secrets.TF_VAR_EKS_NODE_SCALING_DESIRED_SIZE }}
          TF_VAR_eks_node_scaling_max_size: ${{ secrets.TF_VAR_EKS_NODE_SCALING_MAX_SIZE }}
          TF_VAR_eks_node_scaling_min_size: ${{ secrets.TF_VAR_EKS_NODE_SCALING_MIN_SIZE }}
        run: terraform apply -auto-approve
        working-directory: ./infra
        
      - name: Resumo da infraestrutura
        if: steps.changes.outputs.infra_changed == 'true'
        run: echo "Alterações na infraestrutura aplicadas com sucesso."
        
      - name: Nenhuma mudança na infraestrutura
        if: steps.changes.outputs.infra_changed == 'false'
        run: echo "Sem alterações detectadas na pasta infra/ - pulando aplicação do Terraform."

  # ===================================================
  # JOB 4: DEPLOY NO KUBERNETES (EKS)
  # ===================================================
  deploy-to-kubernetes:
    name: 4. Deploy no Kubernetes (EKS)
    runs-on: ubuntu-latest
    needs: [publish-docker-image, apply-infrastructure]
    # Executa se o docker foi bem-sucedido E (a infra foi bem-sucedida ou a infra foi pulada)
    if: needs.publish-docker-image.result == 'success' && (needs.apply-infrastructure.outputs.infra_changed == 'true' && needs.apply-infrastructure.result == 'success' || needs.apply-infrastructure.outputs.infra_changed == 'false')
    steps:
      - name: Checkout do código
        uses: actions/checkout@v4
        
      - name: Configurar credenciais da AWS
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}

      - name: Configurar acesso ao cluster EKS
        run: aws eks update-kubeconfig --region ${{ secrets.AWS_REGION }} --name ${{ secrets.EKS_CLUSTER_NAME }}

      - name: Atualizar tag da imagem no manifesto k8s
        run: |
          # Usa o output do job 'publish-docker-image' para garantir consistência
          sed -i "s|image:.*|image: joaodainese/fiap-12-soat-projeto-fase2:${{ needs.publish-docker-image.outputs.version_tag }}|g" k8s/api/oficina-mecanica-deployment.yaml

      - name: Aplicar configurações gerais
        run: kubectl apply -f k8s/

      - name: Aplicar manifestos do banco de dados
        run: kubectl apply -f k8s/postgres/

      - name: Aplicar manifestos da API
        run: kubectl apply -f k8s/api/
        
      - name: Verificar o status do deploy
        run: kubectl rollout status deployment/oficina-mecanica-deployment --timeout=120s

