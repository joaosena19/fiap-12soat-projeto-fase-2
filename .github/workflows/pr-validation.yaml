name: Validar Pull Request

# Trigger: acionado em todo pull request para a branch 'main'
on:
  pull_request:
    branches: [ "main" ]

jobs:
  build-and-test:
    runs-on: ubuntu-latest

    # Necessário write para publicar o relatório de testes
    permissions:
      checks: write

    steps:
      - name: Checkout do código
        uses: actions/checkout@v4

      - name: Configurar .NET 9.0
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: '9.0.x'

      - name: Encontrar arquivo da Solution (.sln)
        id: find_sln
        run: echo "sln_path=$(find . -name '*.sln' -print -quit)" >> $GITHUB_OUTPUT
        
      - name: Restaurar dependências
        run: dotnet restore ${{ steps.find_sln.outputs.sln_path }}

      - name: Buildar a aplicação (Release)
        run: dotnet build ${{ steps.find_sln.outputs.sln_path }} --no-restore --configuration Release

      - name: Rodar testes unitários (Release)
        run: dotnet test ${{ steps.find_sln.outputs.sln_path }} --no-build --configuration Release --verbosity normal --logger "trx;LogFileName=test-results.trx"
        # Permite que o workflow continue mesmo se os testes falharem, para que o relatório possa ser gerado.
        continue-on-error: true
        env:
          # Valores dummy para o appsettings necessários para os testes
          DatabaseConnection__Host: "localhost"
          DatabaseConnection__Port: "5432"
          DatabaseConnection__DatabaseName: "db_test"
          DatabaseConnection__User: "test_user"
          DatabaseConnection__Password: "test_password"
          Jwt__Key: "dummy-super-secret-key-for-testing-purposes-only"
          ApiCredentials__ClientId: "test-client"
          ApiCredentials__ClientSecret: "test-secret"

      - name: Publicar relatório de testes
        uses: dorny/test-reporter@v1
        # Garante que este passo sempre rode, para que possamos ver o relatório mesmo em caso de falha
        if: always()
        with:
          name: test-report
          path: "**/test-results.trx"
          reporter: dotnet-trx
          # Falha o job se algum teste tiver falhado, garantindo que o PR seja bloqueado
          fail-on-error: true

  # Validação da infraestrutura Terraform
  terraform-validation:
    runs-on: ubuntu-latest
    
    permissions:
      contents: read

    steps:
      - name: Checkout do código
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Verificar mudanças na pasta infra
        id: changes
        run: |
          if git diff --name-only origin/${{ github.base_ref }}...HEAD | grep -q '^infra/'; then
            echo "infra_changed=true" >> $GITHUB_OUTPUT
          else
            echo "infra_changed=false" >> $GITHUB_OUTPUT
          fi

      - name: Configurar credenciais da AWS
        if: steps.changes.outputs.infra_changed == 'true'
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}

      - name: Configurar Terraform
        if: steps.changes.outputs.infra_changed == 'true'
        uses: hashicorp/setup-terraform@v3

      - name: Inicializar Terraform
        if: steps.changes.outputs.infra_changed == 'true'
        run: terraform init
        working-directory: ./infra

      - name: Validar configuração do Terraform
        if: steps.changes.outputs.infra_changed == 'true'
        run: terraform validate
        working-directory: ./infra

      - name: Terraform Plan
        if: steps.changes.outputs.infra_changed == 'true'
        id: plan
        run: terraform plan -no-color
        working-directory: ./infra
        env:
          TF_VAR_bucket_name: ${{ secrets.TF_VAR_BUCKET_NAME }}
          TF_VAR_eks_iam_user_name: ${{ secrets.TF_VAR_EKS_IAM_USER_NAME }}
          TF_VAR_eks_node_scaling_desired_size: ${{ secrets.TF_VAR_EKS_NODE_SCALING_DESIRED_SIZE }}
          TF_VAR_eks_node_scaling_max_size: ${{ secrets.TF_VAR_EKS_NODE_SCALING_MAX_SIZE }}
          TF_VAR_eks_node_scaling_min_size: ${{ secrets.TF_VAR_EKS_NODE_SCALING_MIN_SIZE }}
          TF_VAR_eks_cluster_name: ${{ secrets.TF_VAR_EKS_CLUSTER_NAME }}

      - name: Resumo da validação
        if: steps.changes.outputs.infra_changed == 'true'
        run: echo "Validação do Terraform concluída com sucesso."
        
      - name: Nenhuma mudança na infraestrutura
        if: steps.changes.outputs.infra_changed == 'false'
        run: echo "Sem alterações detectadas na pasta infra/ - pulando validação do Terraform."

